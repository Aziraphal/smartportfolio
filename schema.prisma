generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  plan          String    @default("free")
  stripeCustomerId String? @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  subscriptions UserSubscription[]
  
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  subdomain   String?  @unique
  customDomain String? @unique
  theme       String   @default("default")
  isPublic    Boolean  @default(true)
  lastCvGeneration DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    Project[]
  integrations Integration[]
  
  @@map("portfolios")
}

model Project {
  id              String   @id @default(cuid())
  portfolioId     String
  title           String
  description     String?
  originalDescription String?
  seoDescription  String?
  imageUrl        String?
  projectUrl      String?
  sourceUrl       String?
  tags            String   @default("")
  category        String?
  featured        Boolean  @default(false)
  order           Int      @default(0)
  externalId      String?
  source          String?  // "behance", "github", "dribbble", "manual"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@map("projects")
}

model Integration {
  id          String   @id @default(cuid())
  portfolioId String
  platform    String   // "behance", "github", "dribbble"
  username    String
  accessToken String?
  refreshToken String?
  lastSync    DateTime?
  isActive    Boolean  @default(true)
  settings    String?  @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@unique([portfolioId, platform])
  @@map("integrations")
}

model UserSubscription {
  id                String   @id @default(cuid())
  userId            String
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeCurrentPeriodEnd DateTime?
  stripeCurrentPeriodStart DateTime?
  stripeCustomerId  String?
  planId            String
  status            String   // "active", "canceled", "expired", "trialing", "incomplete"
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  trialEnd         DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_subscriptions")
}

model StripeEvent {
  id               String   @id @default(cuid())
  stripeEventId    String   @unique
  type             String
  processed        Boolean  @default(false)
  createdAt        DateTime @default(now())
  
  @@map("stripe_events")
}